@use 'sass:math';

@import "./screens";

/*=====================================
=            MEDIA QUERIES            =
=====================================*/

  ///@content CSS blocks on the desired element or if used by itself you can play selectors inside
  ///@output It outputs the typed mediaquery and its css blocks if used inside an element
  ///@example
  /// input {
  ///   font-size:32px;
  ///   @include mobile-small {
  ///     font-size:12px;
  ///     }
  /// }
   /// Media Query mixin for extra small mobiles 0 > 359
@mixin mobile-small {
    @media only screen and (max-width: $screen-xxxs) {
      @content;
    }
}

/// Media Query mixin for mobiles 0 > 767
@mixin mobile {
    @media only screen and (max-width: $screen-sm) {
      @content;
    }
}

/// Media Query mixin for small tablets 767 > 991
@mixin tablet {
    @media only screen and (min-width: $screen-sm) and (max-width: $screen-md) {
      @content;
    }
}

/// Media Query mixin for big tablets 992 > 1199
@mixin tablet-big {
    @media only screen and (min-width: $screen-md) and (max-width: $screen-lg) {
      @content;
    }
}

/// Media Query mixin for desktop devices over 1200px > 1699px
@mixin desktop {
    @media only screen and (min-width: $screen-lg) and (max-width: $screen-xl) {
      @content;
    }
}
/// Media Query mixin for desktop devices over 1700px 
@mixin desktop-big {
    @media only screen and (min-width: $screen-xl) {
      @content;
    }
}

/*=====================================
=         END OF MEDIA QUERIES       =
=====================================*/


/*
Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.

@access private
@param {Number} $value - Pixel value to convert.
@param {Number} $base [null] - Base for pixel conversion.

@returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
*/

$font-size: 16;
$global-font-size: 100% !default;

@function rem($values, $base: null) {
    $rem-values: ();
    $count: length($values);
  
    /* If no base is defined, defer to the global font size */
    @if $base == null {
      $base: $global-font-size;
    }
  
    /* If the base font size is a %, then multiply it by 16px
    This is because 100% font size = 16px in most all browsers
    */
    @if unit($base) == "%" {
      $base: calc($base / 100% * 16px);
    }
  
    /* Using rem as base allows correct scaling */
    @if unit($base) == "rem" {
      $base: strip-unit($base) * 16px;
    }
  
    @if $count == 1 {
      @return -to-rem($values, $base);
    }
  
    @for $i from 1 through $count {
      $rem-values: append($rem-values, -to-rem(nth($values, $i), $base));
    }
  
    @return $rem-values;
}

/*
Removes the unit (e.g. px, em, rem) from a value, returning the number only.
@param {Number} $num - Number to strip unit from.
@returns {Number} The same number, sans unit.
*/

@function strip-unit($num) {
    @return math.div($num, ($num * 0 + 1));
}

@function -to-rem($value, $base: null) {
    /* Check if the value is a number */
    @if type-of($value) != "number" {
      @warn inspect($value) + ' was passed to rem(), which is not a number.';
      @return $value;
    }
  
    /* Transform em into rem if someone hands over 'em's */
    @if unit($value) == "em" {
      $value: strip-unit($value) * 1rem;
    }
  
    /* Calculate rem if units for $value is not rem or em */
    @if unit($value) != "rem" {
      $value: calc(strip-unit($value) / strip-unit($base) * 1rem);
    }
  
    /* Turn 0rem into 0 */
    @if $value == 0rem {
      $value: 0;
    }
  
    @return $value;
}

